{
  "hash": "352db6d651bcccdb021d58c8b40e324b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introducing {surveydown}: An markdown-based framework for generating surveys with Quarto and shiny (that now exists!!!)\"\ndescription: |\n  A quick overview of the {surveydown} R package for making markdown-based surveys with open-source technologies (Quarto, shiny, and supabase).\ndate: '2024-08-08'\npreview: \"logo.png\"\ncategories:\n  - R\n  - package\n  - markdown\n  - shiny\n  - package\n  - quarto\nformat: html\ntoc: true\nlightbox: true\n---\n\n\n\n\n<center>\n<img src=\"logo.png\" width=200>\n</center>\n<br>\n\nYou may have read my [previous blog post](https://jhelvy.com/blog/2023-04-06-markdown-surveys/) about an R packaged I called \"surveydown\". That post described some ideas I was thinking about for a package that would allow people to design surveys using markdown and R. But the package didn't exist yet. \n\nWell, I have good news - **the package now exists!** \n\nIn this post, I'm going to show you a quick overview of the {surveydown} R package for making markdown-based surveys.\n\n# What is surveydown?\n\nIf you've never used surveydown before, the video on [this page]() offers a 5 minute overview that you might find helpful.\n\n[surveydown](https://jhelvy.github.io/surveydown/) is a flexible platform for making surveys in `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} using three open source technologies:\n([Quarto](https://quarto.org/), [shiny](https://shiny.posit.co/), and\n[supabase](https://supabase.com/)).\n\n<center>\n<img src=\"technologies.png\" width=500>\n</center>\n<br>\n\nThe basic concept is this:\n\n1.  Design your survey as a [Quarto shiny\n    document](https://quarto.org/docs/dashboards/interactivity/shiny-r.html)\n    using markdown and R code.\n2.  Render your doc into a [shiny](https://shiny.posit.co/) app that can\n    be hosted online and sent to respondents.\n3.  Store your survey responses in a [supabase](https://supabase.com/)\n    database.\n\nThe package is still in development, but you can already use it to create surveys. \n\n# Getting started \n\nAfter getting everything [installed](https://jhelvy.github.io/surveydown/articles/installation.html), it is recommended that you start with a template survey project. You can create one with the following R command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveydown::sd_create_survey(\"path/to/folder\")\n```\n:::\n\n\nThe `\"path/to/folder\"` is the path to wherever you want the template to be created. Once created, you'll see the following files / folders:\n\n```\nexample.qmd\n_extensions\nexample.Rproj\n```\n\nThe only file you will need to edit is the `example.qmd` file. This is the main survey file that you will edit and customize for your survey. The `example.Rproj` is just a project file, which I recommend opening to edit your `example.qmd` file in RStudio (if you're using it). Finally, the `_extensions` folder contains the Quarto extension needed to make everything work. \nIf you have the example open, you can click the \"Run document\" button (in RStudio) or in your terminal run `quarto serve example.qmd`. Either approach should render the example survey into a shiny app that you can preview in a browser. Don't worry just yet about setting up your database or making the survey live just yet - for now, we're going to focus on designing the survey and running it locally to preview it.\n\n# Adding content to your survey \n\nTo edit your survey, you can add plain text with markdown formatting as well as questions defined in R code chunks. Once all of the main survey content (text, images, questions, etc.) are all defined, you can modify the control logic in the server code chunk, found at the bottom of the main survey .qmd file. We'll get to all of this step-by-step.\n\nFor this demo, we have a more detailed example already created that walks you through how to implement a choice-based conjoint survey in a .qmd file with surveydown. You can download this example from [this GitHub repo](https://github.com/pingfan-hu/sdAppleConjoint). I recommend starting with this example when designing your own conjoint survey.\n\n## Adding pages\n\nIn surveydown, pages are delineated using \"fences\", like this:\n\n```\n::: {#welcome .sd-page}\n\nPage 1 content here\n\n:::\n\n::: {#page2 .sd-page}\n\nPage 2 content here\n\n:::\n\n```\n\nAs you can see, we use three colon symbols `:::`, called a \"fence\", to mark the start and end of pages. In the starting fence, you need to define a page name (e.g. `welcome` and `page2` in the example above) and you need to define the class as `.sd-page`. Then anything you put between the page fences will appear on that page. \n\nTo navigate to the next page, you need to insert a `sd_next()` function call, like this: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd_next(next_page = 'page2')\n```\n:::\n\n\nIn this case, the above function would need to be placed in a code chunk in between the `:::` fences for the `welcome` page in order to have a \"Next\" button that goes on to page 2. You can also send the user to other pages.\n\n## Adding questions\n\nEvery survey question is created using the `sd_question()` function.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}